#!/bin/bash
. lib/assert.sh

# How to test
# assert "<command>" "<expected command output>"

# Custom tests

assert_contains "../bin/app Custom/01-simple-func.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n\n\nFin"
assert_contains "../bin/app Custom/03-decl-func.c" "Programme:\n Declaration: Name=a Type=3\n Fonction: Name=main TypeRetour=0\n     Bloc:\n\n\nFin"
assert_contains "../bin/app Custom/04-multiple-decl.c" "Programme:\n Declaration: Name=a Type=3\n Declaration: Name=b Type=3\n Fonction: Name=main TypeRetour=0\n     Bloc:\n\n\nFin"
assert_contains "../bin/app Custom/06-simple-decl-func-bloc.c" "Programme:\n Declaration: Name=a Type=3\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=b Type=3\n\n\nFin"
assert_contains "../bin/app Custom/07-simple-decl-func-bloc-mult.c" "Programme:\n Declaration: Name=a Type=3\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=b Type=3\n      Instruction: Declaration: Name=i Type=1\n\n\nFin"
assert_contains "../bin/app Custom/08-simple-func-param.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Param:\n      Declaration: Name=n Type=3\n     Bloc:\n\n\nFin"
assert_contains "../bin/app Custom/09-simple-func-mult-param.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Param:\n      Declaration: Name=n Type=3\n      Declaration: Name=i Type=1\n     Bloc:\n\n\nFin"
assert_contains "../bin/app Custom/10-decl-func-param-bloc.c" "Programme:\n Declaration: Name=a Type=3\n Declaration: Name=leInt Type=2\n Fonction: Name=main TypeRetour=0\n     Param:\n      Declaration: Name=c Type=3\n      Declaration: Name=oint Type=1\n      Declaration: Name=bigInt Type=2\n     Bloc:\n      Instruction: Declaration: Name=b Type=3\n      Instruction: Declaration: Name=i Type=1\n\n\nFin"
assert_contains "../bin/app Custom/11-multiple-func.c" "Programme:\n Fonction: Name=test1 TypeRetour=0\n     Bloc:\n\n Fonction: Name=main TypeRetour=0\n     Bloc:\n\n\nFin"
assert_contains "../bin/app Custom/12-return-int32.c" "Programme:\n Fonction: Name=func TypeRetour=1\n     Bloc:\n\n\nFin"
assert_contains "../bin/app Custom/13-return-int64.c" "Programme:\n Fonction: Name=func TypeRetour=2\n     Bloc:\n\n\nFin"
assert_contains "../bin/app Custom/14-return-char.c" "Programme:\n Fonction: Name=func TypeRetour=3\n     Bloc:\n\n\nFin"
assert_contains "../bin/app Custom/15-function-call.c" "Programme:\n Declaration: Name=n Type=3\n Fonction: Name=main TypeRetour=2\n     Param:\n      Declaration: Name=n Type=3\n     Bloc:\n      Instruction: Declaration: Name=n Type=3\n      Instruction: AppelFunction: Name=test\n\n\nFin"
assert_contains "../bin/app Custom/16-function-call-params.c" "Programme:\n Fonction: Name=main TypeRetour=1\n     Bloc:\n      Instruction: AppelFunction: Name=func1 Variable: Type=2 Valeur='a' \n      Instruction: AppelFunction: Name=func2 Variable: Type=0 Valeur=name \n      Instruction: AppelFunction: Name=func3 Variable: Type=0 Valeur=name  Variable: Type=1 Valeur=4 \n\n\nFin"
assert_contains "../bin/app Custom/17-retour-name.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: RetourFonction: Expression: Variable: Type=0 Valeur=name \n\n\nFin"
assert_contains "../bin/app Custom/18-retour-entier.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: RetourFonction: Expression: Variable: Type=1 Valeur=8 \n\n\nFin"
assert_contains "../bin/app Custom/19-retour-caractere.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: RetourFonction: Expression: Variable: Type=2 Valeur='a' \n\n\nFin"
assert_contains "../bin/app Custom/20-affectation-simple.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n\n\nFin"
assert_contains "../bin/app Custom/21-affectation-variable.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Declaration: Name=b Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=0 Valeur=b \n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=2 Valeur='c' \n\n\nFin"
assert_contains "../bin/app Custom/22-return-fun.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: RetourFonction: Expression: AppelFunction: Name=fun Variable: Type=0 Valeur=test \n\n\n\nFin"

# Given tests

assert_contains "../bin/app Front/ValidPrograms/01_SimpleDeclaration.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=3\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/02_IncludeStdint.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/03_OperatorPlus.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=13 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/04_OperatorMinus.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=2  Operateur=14 Expression: Variable: Type=1 Valeur=1 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/05_OperatorDiv.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=4  Operateur=16 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/06_OperatorMult.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=4  Operateur=15 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/07_OperatorInf.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=20 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/08_OperatorSup.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=21 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/09_OperatorLeq.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=22 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/10_OperatorGeq.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=23 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/11_OperatorEqu.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=18 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/12_OperatorDiff.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=19 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/13_OperatorMod.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=17 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/14_OperatorAnd.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=24 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/15_OperatorOr.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=25 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/16_OperatorBOr.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=27 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/17_OperatorBAnd.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=26 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/18_OperatorNeg.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationUnaire: Operateur=11 Expression: Variable: Type=0 Valeur=a \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/20_OperatorRightShift.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=8  Operateur=29 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"


assert_contains "../bin/app Front/ValidPrograms/25_OperatorNot.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationUnaire: Operateur=12 Expression: Variable: Type=1 Valeur=1 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/26_OperatorXor.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=30 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/27_OperatorComp.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationUnaire: Operateur=12 Expression: Variable: Type=1 Valeur=1 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/28_OperatorPlusAssign.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=1 Expression: Variable: Type=1 Valeur=2 \n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/29_OperatorMinusAssign.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=2 Expression: Variable: Type=1 Valeur=2 \n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/30_OperatorMultAssign.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=3 Expression: Variable: Type=1 Valeur=3 \n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/31_OperatorDivAssign.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=4 \n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=4 Expression: Variable: Type=1 Valeur=2 \n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/32_OperatorModAssign.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=3 \n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=5 Expression: Variable: Type=1 Valeur=2 \n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/33_OperatorBitAndAssign.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=7 Expression: Variable: Type=1 Valeur=3 \n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/34_OperatorBitOrAssign.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=8 Expression: Variable: Type=1 Valeur=2 \n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/35_OperatorBitXorAssign.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=6 Expression: Variable: Type=1 Valeur=2 \n\n\nFin"


assert_contains "../bin/app Front/ValidPrograms/37_Par.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=13 Expression: Variable: Type=1 Valeur=2 \n Operateur=15 Expression: Variable: Type=1 Valeur=3 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/38_ArithmeticExpression.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: OperationBinaire: Expression: OperationBinaire: Expression: OperationBinaire: Expression: OperationBinaire: Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=13 Expression: Variable: Type=1 Valeur=2 \n Operateur=15 Expression: Variable: Type=1 Valeur=4 \n Operateur=14 Expression: Variable: Type=1 Valeur=4 \n Operateur=16 Expression: Variable: Type=1 Valeur=2 \n Operateur=13 Expression: Variable: Type=1 Valeur=3 \n Operateur=17 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/39_ArithmeticExpressionWithPar.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: OperationBinaire: Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=1  Operateur=13 Expression: Variable: Type=1 Valeur=2 \n Operateur=15 Expression: Variable: Type=1 Valeur=4 \n Operateur=14 Expression: OperationBinaire: Expression: OperationBinaire: Expression: OperationBinaire: Expression: OperationBinaire: Expression: Variable: Type=1 Valeur=4  Operateur=16 Expression: Variable: Type=1 Valeur=2 \n Operateur=13 Expression: Variable: Type=1 Valeur=3 \n Operateur=17 Expression: Variable: Type=1 Valeur=2 \n Operateur=14 Expression: Variable: Type=1 Valeur=2 \n\n\n\n\nFin"

assert_contains "../bin/app Front/ValidPrograms/40_If.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n      Instruction: If: Condition=Expression: OperationBinaire: Expression: Variable: Type=0 Valeur=a  Operateur=18 Expression: Variable: Type=1 Valeur=1 \n     Bloc:\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=2 \n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/41_IfElse.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n      Instruction: If: Condition=Expression: OperationBinaire: Expression: Variable: Type=0 Valeur=a  Operateur=18 Expression: Variable: Type=1 Valeur=1 \n     Bloc:\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=2 \n\n     Else: \n     Bloc:\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n\n\n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/42_While.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=10 \n      Instruction: While: Condition=Expression: OperationBinaire: Expression: Variable: Type=0 Valeur=a  Operateur=19 Expression: Variable: Type=1 Valeur=0 \n     Bloc:\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: OperationBinaire: Expression: Variable: Type=0 Valeur=a  Operateur=14 Expression: Variable: Type=1 Valeur=1 \n\n\n\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/44_IfElseIf.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n      Instruction: If: Condition=Expression: OperationBinaire: Expression: Variable: Type=0 Valeur=a  Operateur=18 Expression: Variable: Type=1 Valeur=1 \n     Bloc:\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=2 \n\n     Else: \n     Bloc:\n      Instruction: If: Condition=Expression: OperationBinaire: Expression: Variable: Type=0 Valeur=a  Operateur=18 Expression: Variable: Type=1 Valeur=2 \n     Bloc:\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=3 \n\n\n\n\n\n\nFin"

assert_contains "../bin/app Front/ValidPrograms/50_CharConst.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=3\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=2 Valeur='a' \n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/51_CharConstSpecial.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=3\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=0 Valeur=n \n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/52_Int64Dec.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=2\n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/53_FunctionCallPutChar.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: AppelFunction: Name=putchar Variable: Type=2 Valeur='a' \n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/54_FunctionCallCustom.c" "Programme:\n Fonction: Name=function TypeRetour=0\n     Param:\n      Declaration: Name=a Type=3\n     Bloc:\n      Instruction: AppelFunction: Name=putchar Variable: Type=0 Valeur=a \n\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: AppelFunction: Name=function Variable: Type=2 Valeur='a' \n\n\nFin"
assert_contains "../bin/app Front/ValidPrograms/55_Return.c" "Programme:\n Fonction: Name=function TypeRetour=1\n     Param:\n      Declaration: Name=a Type=1\n     Bloc:\n      Instruction: RetourFonction: Expression: OperationBinaire: Expression: Variable: Type=0 Valeur=a  Operateur=13 Expression: Variable: Type=1 Valeur=1 \n\n\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Declaration: Name=a Type=1\n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: Variable: Type=1 Valeur=1 \n      Instruction: Affectation:  Variable: Type=0 Valeur=a  Operateur=0 Expression: AppelFunction: Name=function Variable: Type=0 Valeur=a \n\n\n\nFin"

assert_contains "../bin/app Front/ValidPrograms/57_VarInitialization.c" "Programme:\n Fonction: Name=main TypeRetour=0\n     Bloc:\n      Instruction: Initialisation: Type=2 Name=a Expression: Variable: Type=1 Valeur=5 \n\n\nFin"

# end of test suite
assert_end examples